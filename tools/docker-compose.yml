volumes:
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
  postgres-data:
    driver: local
  logappdata:
    driver: local
  prometheus_data:
    driver: local
  static:
    driver: local

networks:
  ft_transcendence:
    driver: bridge

services:

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - app
    environment:
      - NGINX_PORT=80
    volumes:
      - ../conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - static:/www/static/
    ports:
      - "80:80"
    networks:
      - ft_transcendence

  init-es:
    image: curlimages/curl
    container_name: init-es
    environment:
      - PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - "../conf/indexpattern.json:/tmp/indexpattern.json"
      - "../conf/dashkibana.ndjson:/tmp/dashkibana.ndjson"
    entrypoint:
      - /bin/sh
      - '-c'
      - |
        URL=http://elastic:$${PASSWORD}@kibana:5601
        status_code=$$(curl --write-out %{http_code} --silent --output /dev/null $$URL/app/home)
        echo $$status_code
        sleep 4
        while [ $$status_code -ne 200 ]
        do
          status_code=$$(curl --write-out %{http_code} --silent --output /dev/null $$URL/app/home)
          echo $$status_code
          sleep 4
        done
        curl -H "osd-xsrf: true" \
          -H "Content-Type: application/json" \
          -H "securitytenant: Global" \
          -H "kbn-xsrf: reporting" \
          -d "@/tmp/indexpattern.json" \
          "$$URL/api/saved_objects/index-pattern/filebeat-*"
        echo 'index pattern imported'
        curl -X POST "$$URL/api/saved_objects/_import" -H "kbn-xsrf: true" --form file=@/tmp/dashkibana.ndjson
        echo 'dashboard imported'
    networks:
      - ft_transcendence
    depends_on:
      - es01
      - kibana

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    labels:
      co.elastic.logs/module: elasticsearch
    networks:
      - ft_transcendence
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_USERNAME=elastic
      - xpack.license.self_generated.type=basic
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.enabled=true
    mem_limit: 3073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]

  kibana:
    depends_on:
      es01:
        condition: service_started
    image: docker.elastic.co/kibana/kibana:7.17.0
    labels:
      co.elastic.logs/module: kibana
    networks:
      - ft_transcendence
    volumes:
      - kibanadata:/usr/share/kibana/data
      - ./../conf/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - XPACK_SECURITY_ENCRYPTIONKEY=${SECRET_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${SECRET_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${SECRET_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - ELASTIC_APM_SECRET_TOKEN=${SECRET_KEY}
    mem_limit: 1073741824

  metricbeat01:
    depends_on:
      es01:
        condition: service_started
      kibana:
        condition: service_started
    image: docker.elastic.co/beats/metricbeat:7.17.0
    user: root
    networks:
      - ft_transcendence
    volumes:
      - metricbeatdata01:/usr/share/metricbeat/data
      - "../conf/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    command:
      -strict.perms=false

  filebeat01:
    depends_on:
      es01:
        condition: service_started
    image: docker.elastic.co/beats/filebeat:7.17.0
    user: root
    networks:
      - ft_transcendence
    volumes:
      - logappdata:/usr/share/filebeat/app/
      - filebeatdata01:/usr/share/filebeat/data
      - "../conf/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "../conf/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    command:
      -strict.perms=false

  logstash01:
    depends_on:
      es01:
        condition: service_started
      kibana:
        condition: service_started
    image: docker.elastic.co/logstash/logstash:7.17.0
    labels:
      co.elastic.logs/module: logstash
    user: root
    networks:
      - ft_transcendence
    volumes:
      - logstashdata01:/usr/share/logstash/data
      - "../conf/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "../conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200

  apm-server:
    depends_on:
      kibana:
        condition: service_started
      es01:
        condition: service_started
    image: docker.elastic.co/apm/apm-server:7.17.0
    networks:
      - ft_transcendence
    user: root
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E output.elasticsearch.password=${ELASTIC_PASSWORD}
        -E output.elasticsearch.username=elastic
        -E setup.kibana.host=http://kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=http://kibana:5601
        -E apm-server.auth.anonymous.enabled=true
        -E apm-server.rum.enabled=true
        -E output.elasticsearch.hosts=["http://es01:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  heartbeat:
    depends_on:
      kibana:
        condition: service_started
      es01:
        condition: service_started
    image: docker.elastic.co/beats/heartbeat:7.17.0
    user: root
    volumes:
      - ../conf/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - ft_transcendence
    command:
      -strict.perms=false
    healthcheck:
      interval: 10s
      retries: 12
      test: ["CMD", "curl", "-XGET", "-f", "http://localhost:5066/stats"]

  app-setup:
    build:
      context: ..
      dockerfile: ./tools/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    command: poetry run python manage.py migrate
    networks:
      - ft_transcendence

  app:
    build:
      context: ..
      dockerfile: ./tools/Dockerfile
    depends_on:
      heartbeat:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - logappdata:/app/logs/
      - static:/app/static
    networks:
      - ft_transcendence
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEBUG=${DEBUG}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}

  db:
    image: postgres:15
    container_name: postgres
    restart: on-failure
    networks:
      - ft_transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  prometheus:
    image: prom/prometheus
    restart: on-failure
    volumes:
      - prometheus_data:/prometheus
      - ../conf/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ft_transcendence

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: on-failure
    volumes:
      - ../conf/grafana/alert.yaml:/etc/grafana/provisioning/alerting/alert.yaml
      - ../conf/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ../conf/grafana/dashboards:/var/lib/grafana/dashboards
      - ../conf/grafana/automatic.yaml:/etc/grafana/provisioning/datasources/automatic.yaml
    depends_on:
      - prometheus
    networks:
      - ft_transcendence
